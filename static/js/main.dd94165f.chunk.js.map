{"version":3,"sources":["gameLibrary.js","util.js","gameOfLife.js","Game.js","serviceWorker.js","index.js"],"names":["require","sum","parseBoolToInt","world","grid","generateGrid","dimension","length","width","Array","fill","map","element","getGridDimension","isCellPositionValid","position","latitude","longitude","_this$getGridDimensio","this","Math","min","isCellStateAlive","getAllNeighbours","points","neighbour","forEach","x","y","push","filter","getAliveNeighbours","_this","getAliveNeighboursCount","reduce","updatePositionState","positionDetail","aliveNeighbours","updateGrid","newGrid","slice","_this$getGridDimensio2","newState","initializeGrid","module","exports","num1","num2","value","repeatCharacter","times","char","join","nextGeneration","currGeneration","aliveCell","newGeneration","_world$getGridDimensi","row","column","getAliveCells","Game","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","bounds","topLeft","bottomRight","aliveCells","selectCell","bind","assertThisInitialized","runGame","event","target","style","backgroundColor","allRows","number","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","j","children","err","return","cell","some","_this2","document","getElementById","getAllSelectedCellsNumbers","selectedCell","numbers","i","includes","getCoordinates","setInterval","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","willAlive","react_default","a","createElement","onClick","cells","className","onclick","id","rowsGenerator","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Game_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd94165f.chunk.js","sourcesContent":["const { sum, parseBoolToInt } = require('./util.js');\n\nconst world = {\n  grid: [],\n\n  generateGrid: function(dimension) {\n    let { length, width } = dimension;\n    let gridRows = new Array(length).fill(0);\n    let grid = gridRows.map(element => {\n      return new Array(width).fill(0);\n    });\n    return grid;\n  },\n\n  getGridDimension: function(grid) {\n    return { length: grid.length, width: grid[0].length };\n  },\n\n  isCellPositionValid: function(position) {\n    let { latitude, longitude } = position;\n    let { length, width } = this.getGridDimension(this.grid);\n    return !(\n      Math.min(latitude, longitude) < 0 ||\n      latitude >= length ||\n      longitude >= width\n    );\n  },\n\n  isCellStateAlive: function(position) {\n    let { latitude, longitude } = position;\n    return (\n      this.isCellPositionValid(position) && this.grid[latitude][longitude] == 1\n    );\n  },\n\n  getAllNeighbours: function(position) {\n    let { latitude, longitude } = position;\n    let points = [-1, 0, 1];\n    let neighbour = [];\n\n    points.forEach(x => {\n      points.forEach(y => {\n        neighbour.push([latitude + x, longitude + y]);\n      });\n    });\n\n    return neighbour.filter(x => {\n      return !(x[0] == latitude && x[1] == longitude);\n    });\n  },\n\n  getAliveNeighbours: function(position) {\n    return this.getAllNeighbours(position)\n      .map(x => this.isCellStateAlive({ latitude: x[0], longitude: x[1] }))\n      .map(parseBoolToInt);\n  },\n\n  getAliveNeighboursCount: function(position) {\n    return this.getAliveNeighbours(position).reduce(sum);\n  },\n\n  updatePositionState: function(positionDetail) {\n    let { latitude, longitude, aliveNeighbours } = positionDetail;\n    if (aliveNeighbours < 2 || aliveNeighbours > 3) {\n      return 0;\n    }\n    if (aliveNeighbours == 3) {\n      return 1;\n    }\n    return this.grid[latitude][longitude];\n  },\n\n  updateGrid: function() {\n    let newGrid = this.grid.map(x => x.slice());\n    let { length, width } = this.getGridDimension(this.grid);\n    for (let latitude = 0; latitude < length; latitude++) {\n      for (let longitude = 0; longitude < width; longitude++) {\n        let aliveNeighbours = this.getAliveNeighboursCount({\n          latitude,\n          longitude\n        });\n        let newState = this.updatePositionState({\n          latitude,\n          longitude,\n          aliveNeighbours\n        });\n        newGrid[latitude][longitude] = newState;\n      }\n    }\n    this.grid = newGrid;\n  },\n\n  initializeGrid: function(position) {\n    let { latitude, longitude } = position;\n    this.grid[latitude][longitude] = 1;\n  }\n};\n\nmodule.exports = {\n  world\n};\n","const sum = function(num1, num2) {\n  return num1 + num2;\n};\n\nconst parseBoolToInt = function(value) {\n  return 0 + value;\n};\n\nconst repeatCharacter = function(times, char) {\n  return new Array(times).fill(char).join('');\n};\n\nmodule.exports = {\n  sum,\n  parseBoolToInt,\n  repeatCharacter\n};\n","const { world } = require('./gameLibrary.js');\n\nconst getCoordinates = function(selectedCell, length, width) {\n  let currGeneration = new Array();\n  let numbers = 1;\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < length; j++) {\n      if (selectedCell.includes(numbers)) {\n        currGeneration.push([i, j]);\n      }\n      numbers++;\n    }\n  }\n  return currGeneration;\n};\n\nconst getAliveCells = function() {\n  let newGeneration = [];\n  let { length, width } = world.getGridDimension(world.grid);\n  for (let row = 0; row < length; row++) {\n    for (let column = 0; column < width; column++) {\n      world.grid[row][column] == 1 && newGeneration.push([row, column]);\n    }\n  }\n  return newGeneration;\n};\n\nconst nextGeneration = function(length, width, currGeneration) {\n  world.grid = world.generateGrid({ length, width });\n  currGeneration.forEach(aliveCell => {\n    world.initializeGrid({ latitude: aliveCell[0], longitude: aliveCell[1] });\n  });\n\n  world.updateGrid();\n  return getAliveCells();\n};\n\nexport { getCoordinates, nextGeneration };\n","import React, { Component } from 'react';\nimport './Game.css';\nimport { nextGeneration, getCoordinates } from './gameOfLife.js';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.setState = {\n      bounds: { topLeft: [0, 0], bottomRight: [4, 4] },\n      currGeneration: [],\n      aliveCells: []\n    };\n\n    this.length =\n      this.setState.bounds.bottomRight[0] - this.setState.bounds.topLeft[0] + 1;\n    this.width =\n      this.setState.bounds.bottomRight[1] - this.setState.bounds.topLeft[1] + 1;\n    this.selectCell = this.selectCell.bind(this);\n    this.runGame = this.runGame.bind(this);\n  }\n\n  selectCell(event) {\n    event.target.style.backgroundColor = 'black';\n  }\n\n  getAllSelectedCellsNumbers(allRows) {\n    let number = 1;\n    for (let row of allRows) {\n      for (let j = 0; j < this.length; j++) {\n        if (row.children[j].style.backgroundColor == 'black')\n          this.setState.aliveCells.push(number);\n        number++;\n      }\n    }\n  }\n\n  willAlive(cell) {\n    return this.setState.currGeneration.some(position => {\n      return +position.join('') == +cell.join('');\n    });\n  }\n\n  runGame() {\n    let allRows = document.getElementById('Board').children;\n    this.getAllSelectedCellsNumbers(allRows);\n\n    this.setState.currGeneration = getCoordinates(\n      this.setState.aliveCells,\n      this.length,\n      this.width\n    );\n\n    setInterval(() => {\n      this.setState.currGeneration = nextGeneration(\n        this.length,\n        this.width,\n        this.setState.currGeneration\n      );\n\n      let i = 0;\n      for (let row of allRows) {\n        for (let j = 0; j < this.width; j++) {\n          row.children[j].style.backgroundColor = 'white';\n          if (this.willAlive([i, j]))\n            row.children[j].style.backgroundColor = 'black';\n        }\n        i++;\n      }\n    }, 1000);\n  }\n\n  rowsGenerator() {\n    let cell = <td onClick={this.selectCell} />;\n    let cells = new Array(this.length).fill(cell);\n    let row = <tr className=\"CellRow\">{cells}</tr>;\n    let rows = new Array(this.width).fill(row);\n    return rows;\n  }\n\n  render() {\n    let doneButton = document.getElementById('done');\n    doneButton.onclick = this.runGame;\n    return (\n      <div className=\"Game\">\n        <table id=\"Board\" className=\"Board\">\n          {this.rowsGenerator()}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}